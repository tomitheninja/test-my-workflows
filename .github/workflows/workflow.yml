name: CI Pipeline with Async Job Control

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - labeled # Watch for label changes to dynamically resume async workflows

permissions:
  issues: write
  pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ISSUE_ENDPOINT: ${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}
  DEVOPS_LABELS: "job1-skip job1-force-pass job2-skip job2-force-pass job2-pending job2-pass job3-skip job3-force-pass"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  initialize:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
    steps:
      - name: Set initial control labels for PR
        run: |
          for label in $DEVOPS_LABELS; do
            curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              "${ISSUE_ENDPOINT}/labels" \
              -d "{\"labels\": [\"$label\"]}"
          done

  job1:
    runs-on: ubuntu-latest
    needs: initialize
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'job1-skip') }}
    steps:
      - name: Check for job1 force-pass
        if: contains(github.event.pull_request.labels.*.name, 'job1-force-pass')
        run: echo "job1 force-passed by DevOps" && exit 0

      - name: Run job1 tasks
        run: echo "Running job1..."

  trigger_job2:
    runs-on: ubuntu-latest
    needs: job1
    if: ${{ !failure() && !contains(github.event.pull_request.labels.*.name, 'job2-skip') }}
    steps:
      - name: Trigger async job (Jenkins)
        env:
          JENKINS_URL: jenkins-server-url
          JENKINS_USER: jenkins-user
          JENKINS_TOKEN: jenkins-token
        run: |
          echo curl -s -X POST "${JENKINS_URL}/job/your-jenkins-job-name/build" \
            --user "$JENKINS_USER:$JENKINS_TOKEN"

          # After triggering, set a pending state label
          curl -s -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
            "${ISSUE_ENDPOINT}/labels" -d '{"labels": ["job2-pending"]}'

  wait_for_job2_completion:
    runs-on: ubuntu-latest
    needs: trigger_job2
    if: contains(github.event.pull_request.labels.*.name, 'job2-pending')
    steps:
      - name: Await async job completion
        run: |
          echo "Waiting for job2-pass label to appear. Workflow will resume automatically upon job2 completion."

  job3:
    runs-on: ubuntu-latest
    needs: wait_for_job2_completion
    if: ${{ !failure() && !contains(github.event.pull_request.labels.*.name, 'job3-skip') }}
    steps:
      - name: Check for job3 force-pass
        if: contains(github.event.pull_request.labels.*.name, 'job3-force-pass')
        run: echo "job3 force-passed by DevOps" && exit 0

      - name: Run job3 tasks
        run: echo "Running job3..."
